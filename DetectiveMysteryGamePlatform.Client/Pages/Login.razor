@page "/login"
@using DetectiveMysteryGamePlatform.Client.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Blazored.LocalStorage
@inject ApiService ApiService
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<div class="login-container">
    <div class="login-card">
        <h2>Detective Mystery Game Platform</h2>
        <h3>Admin Login</h3>

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Loading...</span>
                }
                else
                {
                    <span>Login</span>
                }
            </button>
        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3">
                @errorMessage
            </div>
        }
    </div>
</div>

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-color: #1a1a1a;
        color: #fff;
    }

    .login-card {
        background-color: #2a2a2a;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        width: 100%;
        max-width: 400px;
    }

    h2, h3 {
        text-align: center;
        margin-bottom: 1.5rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-control {
        background-color: #3a3a3a;
        border: none;
        color: #fff;
        padding: 0.75rem;
        border-radius: 4px;
        width: 100%;
    }

    .btn-primary {
        background-color: #6a0dad;
        border: none;
        width: 100%;
        padding: 0.75rem;
        border-radius: 4px;
        font-weight: bold;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .btn-primary:hover {
        background-color: #8a2be2;
    }

    .validation-message {
        color: #ff6b6b;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }
</style>

@code {
    private LoginModel loginModel = new LoginModel();
    private bool isLoading = false;
    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var token = await ApiService.Login(loginModel.Email, loginModel.Password);
            
            await LocalStorage.SetItemAsync("authToken", token);
            
            var authStateProvider = (CustomAuthStateProvider)AuthStateProvider;
            authStateProvider.MarkUserAsAuthenticated(token);
            
            NavigationManager.NavigateTo("/admin/dashboard");
        }
        catch (Exception ex)
        {
            errorMessage = "Invalid email or password. Please try again.";
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private class LoginModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        public string Password { get; set; } = string.Empty;
    }
} 