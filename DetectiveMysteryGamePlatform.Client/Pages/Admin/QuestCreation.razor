@page "/admin/quests/create"
@using DetectiveMysteryGamePlatform.Shared.Models
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]

<div class="quest-creation-container">
    <h2>Create New Quest</h2>

    <EditForm Model="@quest" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="title">Title</label>
            <InputText id="title" @bind-Value="quest.Title" class="form-control" />
            <ValidationMessage For="@(() => quest.Title)" />
        </div>

        <div class="form-group">
            <label for="description">Description</label>
            <InputTextArea id="description" @bind-Value="quest.Description" class="form-control" rows="3" />
            <ValidationMessage For="@(() => quest.Description)" />
        </div>

        <div class="form-group">
            <label for="numberOfRounds">Number of Rounds</label>
            <InputNumber id="numberOfRounds" @bind-Value="quest.NumberOfRounds" class="form-control" />
            <ValidationMessage For="@(() => quest.NumberOfRounds)" />
        </div>

        <div class="button-group">
            <button type="submit" class="btn btn-primary">Create Quest</button>
            <button type="button" class="btn btn-secondary" @onclick="NavigateBack">Cancel</button>
        </div>
    </EditForm>

    @if (errorMessage != null)
    {
        <div class="alert alert-danger mt-3">
            @errorMessage
        </div>
    }
</div>

<style>
    .quest-creation-container {
        max-width: 800px;
        margin: 2rem auto;
        padding: 2rem;
        background-color: var(--card-background, #ffffff);
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-control {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid var(--border-color, #ced4da);
        border-radius: 4px;
        background-color: var(--input-background, #ffffff);
        color: var(--text-color, #212529);
    }

    .button-group {
        margin-top: 2rem;
        display: flex;
        gap: 1rem;
    }

    .btn {
        padding: 0.5rem 1rem;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 500;
    }

    .btn-primary {
        background-color: var(--primary-color, #007bff);
        color: white;
        border: none;
    }

    .btn-secondary {
        background-color: var(--secondary-color, #6c757d);
        color: white;
        border: none;
    }
</style>

@code {
    private Quest quest = new Quest();
    private string? errorMessage;

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/quests", quest);
            
            if (response.IsSuccessStatusCode)
            {
                var createdQuest = await response.Content.ReadFromJsonAsync<Quest>();
                NavigationManager.NavigateTo($"/admin/quests/{createdQuest?.Id}/edit");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to create quest: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/admin/quests");
    }
} 