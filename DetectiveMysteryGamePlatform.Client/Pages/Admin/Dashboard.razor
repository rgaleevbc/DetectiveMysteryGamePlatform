@page "/admin/dashboard"
@using DetectiveMysteryGamePlatform.Client.Services
@using DetectiveMysteryGamePlatform.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@attribute [Authorize(Roles = "Admin")]
@inject ApiService ApiService
@inject NavigationManager NavigationManager

<h1>Admin Dashboard</h1>

<div class="dashboard-container">
    <div class="dashboard-section">
        <div class="section-header">
            <h2>Quests</h2>
            <button class="btn btn-primary" @onclick='() => NavigationManager.NavigateTo("/admin/quests/create")'>
                Create New Quest
            </button>
        </div>

        @if (isLoading)
        {
            <p>Loading quests...</p>
        }
        else if (errorMessage != null)
        {
            <p>@errorMessage</p>
        }
        else if (!quests.Any())
        {
            <p>No quests found. Create your first quest to get started.</p>
        }
        else
        {
            <div class="quest-cards">
                @foreach (var quest in quests)
                {
                    <div class="quest-card">
                        <h3>@quest.Title</h3>
                        <p>@quest.Description</p>
                        <p><strong>Rounds:</strong> @quest.NumberOfRounds</p>
                        <p><strong>Created:</strong> @quest.CreatedAt.ToShortDateString()</p>
                        <div class="card-actions">
                            <button class="btn btn-secondary" @onclick='() => NavigationManager.NavigateTo("/admin/quests/" + quest.Id)'>
                                Edit
                            </button>
                            <button class="btn btn-success" @onclick='() => CreateGameSession(quest.Id)'>
                                Start Game
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
    </div>

    <div class="dashboard-section">
        <div class="section-header">
            <h2>Active Game Sessions</h2>
        </div>

        @if (isLoading)
        {
            <p>Loading game sessions...</p>
        }
        else if (errorMessage != null)
        {
            <p>@errorMessage</p>
        }
        else if (!gameSessions.Any())
        {
            <p>No active game sessions found.</p>
        }
        else
        {
            <div class="session-cards">
                @foreach (var session in gameSessions.Where(s => s.Status != GameSessionStatus.Completed))
                {
                    <div class="session-card">
                        <h3>@GetQuestTitle(session.QuestId)</h3>
                        <p><strong>Status:</strong> @session.Status</p>
                        <p><strong>Created:</strong> @session.CreatedAt.ToShortDateString()</p>
                        <div class="card-actions">
                            <button class="btn btn-primary" @onclick='() => NavigationManager.NavigateTo("/admin/game-sessions/" + session.Id)'>
                                Manage
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<style>
    .dashboard-container {
        display: flex;
        flex-direction: column;
        gap: 2rem;
        max-width: 1200px;
        margin: 0 auto;
        padding: 1rem;
    }

    .dashboard-section {
        background-color: #ffffff;
        border-radius: 8px;
        padding: 1.5rem;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
    }

    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
    }

    .quest-cards, .session-cards {
        display: grid;
        grid-template-columns: 1fr;
        gap: 1rem;
    }

    .quest-card, .session-card {
        background-color: #f8f8f8;
        border-radius: 8px;
        padding: 1.5rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .card-actions {
        display: flex;
        gap: 0.5rem;
        margin-top: 1rem;
    }

    .btn {
        padding: 0.5rem 1rem;
        border-radius: 4px;
        font-weight: bold;
        cursor: pointer;
        border: none;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-primary {
        background-color: #6a0dad;
        color: white;
    }

    .btn-secondary {
        background-color: #5a5a5a;
        color: white;
    }

    .btn-success {
        background-color: #28a745;
        color: white;
    }

    h1 {
        margin-bottom: 2rem;
        color: #333333;
    }

    h2 {
        margin: 0;
        color: #333333;
    }

    h3 {
        margin-top: 0;
        color: #333333;
    }

    p {
        color: #666666;
    }

    @@media (min-width: 768px) {
        .quest-cards, .session-cards {
            grid-template-columns: repeat(2, 1fr);
        }
    }

    @@media (min-width: 1024px) {
        .quest-cards {
            grid-template-columns: repeat(3, 1fr);
        }
    }
</style>

@code {
    private List<Quest> quests = new();
    private List<GameSession> gameSessions = new();
    private string? errorMessage;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            
            var questsResult = await ApiService.GetQuests();
            var sessionsResult = await ApiService.GetGameSessions();

            if (questsResult != null)
            {
                quests = questsResult;
            }

            if (sessionsResult != null)
            {
                gameSessions = sessionsResult;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetQuestTitle(Guid questId)
    {
        if (quests == null) return "Unknown Quest";
        var quest = quests.FirstOrDefault(q => q.Id == questId);
        return quest?.Title ?? "Unknown Quest";
    }

    private async Task CreateGameSession(Guid questId)
    {
        if (questId == Guid.Empty)
        {
            errorMessage = "Invalid quest ID";
            return;
        }

        try
        {
            errorMessage = null;
            var gameSession = await ApiService.CreateGameSession(questId);
            
            if (gameSession == null || gameSession.Id == Guid.Empty)
            {
                throw new InvalidOperationException("Failed to create game session");
            }

            NavigationManager.NavigateTo($"/admin/game-sessions/{gameSession.Id}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating game session: {ex.Message}";
            Console.WriteLine(ex.Message);
        }
    }
}